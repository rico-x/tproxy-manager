name: Build TPROXY-Manager via ipkg-build + Feed + Sign + Releases + Pages

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
    paths:
      - "pkg/**"
      - "keys/**"
      - ".github/workflows/build-ipk.yml"
      - "README.md"
  workflow_dispatch: {}

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PKG_DIR: pkg/tproxy-manager-ipk
  FEED_DIR: feed

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute version
        id: ver
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VER="${GITHUB_REF_NAME#v}"
          else
            VER="$(date -u +%Y.%m.%d)-${GITHUB_SHA::7}"
          fi
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Install base tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            ca-certificates curl gzip tar coreutils findutils gawk sed perl zip \
            build-essential cmake xz-utils

      - name: Fetch ipkg-build & ipkg-make-index.sh (OpenWrt 24.10)
        run: |
          curl -fsSL https://raw.githubusercontent.com/openwrt/openwrt/openwrt-24.10/scripts/ipkg-build -o ipkg-build
          curl -fsSL https://raw.githubusercontent.com/openwrt/openwrt/openwrt-24.10/scripts/ipkg-make-index.sh -o ipkg-make-index.sh
          chmod +x ipkg-build ipkg-make-index.sh
          ./ipkg-build -h || true

      - name: Normalize CONTROL/control and perms
        shell: bash
        run: |
          set -e
          CTRL="$PKG_DIR/CONTROL/control"
          [[ -f "$CTRL" ]] || { echo "Missing $CTRL"; exit 1; }
          # LF + без BOM + пустая строка в конце
          sed -i 's/\r$//' "$CTRL" || true
          perl -0777 -pe 's/^\xEF\xBB\xBF//' -i "$CTRL" || true
          tail -c1 "$CTRL" | od -An -t x1 | grep -q '0a' || echo >> "$CTRL"
          # Права на исполняемые файлы
          find "$PKG_DIR" -type f -path '*/etc/init.d/*' -exec chmod 0755 {} +
          find "$PKG_DIR" -type f -path '*/etc/uci-defaults/*' -exec chmod 0755 {} +
          [ -f "$PKG_DIR/CONTROL/postinst" ] && chmod 0755 "$PKG_DIR/CONTROL/postinst" || true
          [ -f "$PKG_DIR/CONTROL/prerm"    ] && chmod 0755 "$PKG_DIR/CONTROL/prerm"    || true
          # Дополнительные скрипты
          [ -f "$PKG_DIR/usr/bin/optimize-sysctl.sh" ] && chmod 0755 "$PKG_DIR/usr/bin/optimize-sysctl.sh" || true
          [ -f "$PKG_DIR/usr/bin/setup-bbr.sh"       ] && chmod 0755 "$PKG_DIR/usr/bin/setup-bbr.sh"       || true
          # Основной бинарь
          [ -f "$PKG_DIR/usr/bin/xray-tproxy.sh" ] && chmod 0755 "$PKG_DIR/usr/bin/xray-tproxy.sh" || true

      - name: Inject Version into control
        shell: bash
        run: |
          CTRL="$PKG_DIR/CONTROL/control"
          if grep -q '^Version:' "$CTRL"; then
            sed -i "s/^Version:.*/Version: v${{ steps.ver.outputs.version }}_1-1/" "$CTRL"
          else
            echo "Version: v${{ steps.ver.outputs.version }}_1-1" >> "$CTRL"
          fi
          tail -c1 "$CTRL" | od -An -t x1 | grep -q '0a' || echo >> "$CTRL"

      - name: Build .ipk via ipkg-build (ABS dest)
        shell: bash
        run: |
          DEST="$(pwd)/dist"
          mkdir -p "$DEST"
          ./ipkg-build "$PKG_DIR" "$DEST"
          echo "--- dist content ---"
          ls -lah "$DEST"
          echo "--- quick check ---"
          file "$DEST"/*.ipk
          tar tzf "$DEST"/*.ipk | sed -n '1,10p'

      - name: Prepare feed (lite indexer, no ipkg-make-index.sh)
        shell: bash
        run: |
          set -euo pipefail
      
          # 1) Подготовим каталог фида
          rm -rf "$FEED_DIR"
          mkdir -p "$FEED_DIR/keys"
          cp dist/*.ipk "$FEED_DIR"/
      
          # 2) Примитивный индексатор: Packages (+ Packages.gz)
          cat > "$FEED_DIR/.index_lite.sh" <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          dir="${1:-.}"
          cd "$dir"
          : > Packages
      
          # маленький помощник — безопасно получить control (поддерживаем .ipk и как tar.gz, и как ar)
          get_control() {
            local ipk="$1"
            local ctrl=""
            # Попытка как tar.gz-контейнер (ipkg-build 24.10)
            if tar tzf "$ipk" >/dev/null 2>&1; then
              if tar tzf "$ipk" | grep -q '^./control.tar.gz$'; then
                ctrl="$(tar -xOzf "$ipk" ./control.tar.gz \
                       | tar -xOzf - ./control 2>/dev/null \
                       || tar -xOzf - control 2>/dev/null || true)"
              elif tar tzf "$ipk" | grep -q '^./control.tar.xz$'; then
                ctrl="$(tar -xOzf "$ipk" ./control.tar.xz \
                       | tar -xOJf - ./control 2>/dev/null \
                       || tar -xOJf - control 2>/dev/null || true)"
              fi
            fi
            # Попытка как ar-контейнер (на всякий случай)
            if [ -z "$ctrl" ]; then
              if ar t "$ipk" 2>/dev/null | grep -q '^control.tar.gz$'; then
                ctrl="$(ar p "$ipk" control.tar.gz \
                       | tar -xOzf - ./control 2>/dev/null \
                       || tar -xOzf - control 2>/dev/null || true)"
              elif ar t "$ipk" 2>/dev/null | grep -q '^control.tar.xz$'; then
                ctrl="$(ar p "$ipk" control.tar.xz \
                       | tar -xOJf - ./control 2>/dev/null \
                       || tar -xOJf - control 2>/dev/null || true)"
              fi
            fi
            [ -n "$ctrl" ] && printf "%s" "$ctrl"
            return 0
          }
      
          for ipk in *.ipk; do
            [ -f "$ipk" ] || continue
            ctrl="$(get_control "$ipk")" || true
            if [ -z "$ctrl" ]; then
              echo "WARN: cannot read control from $ipk" >&2
              continue
            fi
            # Нормализуем и пишем блок control как есть
            printf "%s\n" "$ctrl" >> Packages
      
            # Добавим стандартные поля фида
            size=$(stat -c%s "$ipk" 2>/dev/null || wc -c < "$ipk")
            sha256=$(sha256sum "$ipk" | awk '{print $1}')
            echo "Filename: $ipk"   >> Packages
            echo "Size: $size"      >> Packages
            echo "SHA256sum: $sha256" >> Packages
            echo >> Packages
          done
      
          # Сжать индекс
          gzip -9fk Packages
          SH
      
          chmod +x "$FEED_DIR/.index_lite.sh"
          "$FEED_DIR/.index_lite.sh" "$FEED_DIR"
      
          # 3) Публичный ключ (если добавлен)
          [ -f keys/usign.pub ] && cp keys/usign.pub "$FEED_DIR/keys/"

      - name: Sign feed (optional)
        env:
          USIGN_SECRET: ${{ secrets.USIGN_SECRET }}
        shell: bash
        run: |
          set -e
          if [ -z "${USIGN_SECRET:-}" ]; then
            echo "USIGN_SECRET is empty; skip signing."
            exit 0
          fi
      
          # собрать usign из исходников (без git clone)
          curl -fsSL https://github.com/openwrt/usign/archive/refs/heads/master.tar.gz -o usign.tar.gz
          mkdir usign-src && tar xzf usign.tar.gz -C usign-src --strip-components=1
          cmake -S usign-src -B usign-build
          cmake --build usign-build -j"$(nproc)"
      
          # подписать Packages
          echo "$USIGN_SECRET" | base64 -d > /tmp/usign.key
          chmod 600 /tmp/usign.key
          ./usign-build/usign -S -m "$FEED_DIR/Packages" -s /tmp/usign.key
          ls -l "$FEED_DIR"/Packages*

      - name: ZIP bundle (versioned)
        shell: bash
        run: |
          VER="${{ steps.ver.outputs.version }}"
          mkdir -p release
          (cd dist && sha256sum *.ipk > "SHA256SUMS_${VER}.txt")
          (cd dist && zip -9 "../release/tproxy-manager_${VER}.zip" *.ipk "SHA256SUMS_${VER}.txt")
          ls -lah release

      - name: Upload Pages artifact (feed/)
        uses: actions/upload-pages-artifact@v3
        with:
          path: feed

      - name: Upload artifacts (versioned)
        uses: actions/upload-artifact@v4
        with:
          name: "tproxy-manager_${{ steps.ver.outputs.version }}"
          path: |
            dist/*.ipk
            release/*.zip
            feed/*

  release:
    needs: build
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dl
      - name: Create GitHub Release and upload
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dl/**/dist/*.ipk
            dl/**/release/*.zip
            dl/**/feed/Packages
            dl/**/feed/Packages.gz
            dl/**/feed/Packages.sig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pages-deploy:
    needs: build
    if: github.ref == 'refs/heads/main'   # деплоим Pages только с ветки main
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5
  
      # Разворачивает последний загруженный pages-артефакт (из шага выше в job "build")
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4