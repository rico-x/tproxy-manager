name: Build .ipk (manual, no SDK / no opkg-utils)

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"
    paths:
      - "pkg/**"
      - ".github/workflows/build-ipk.yml"
  workflow_dispatch: {}

permissions:
  contents: write

env:
  PKG_DIR: pkg/tproxy-manager-ipk

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute version
        id: ver
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VER="${GITHUB_REF_NAME}"
          else
            VER="$(date -u +%Y.%m.%d)-${GITHUB_SHA::7}"
          fi
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Prepare tools
        run: |
          sudo apt-get update
          sudo apt-get install -y tar xz-utils coreutils binutils gzip rsync

      - name: Sanity & perms
        shell: bash
        run: |
          set -e
          CTRL="$PKG_DIR/CONTROL/control"
          [[ -f "$CTRL" ]] || { echo "Missing $CTRL"; exit 1; }

          find "$PKG_DIR" -type f -path '*/etc/init.d/*' -exec chmod 0755 {} +
          find "$PKG_DIR" -type f -path '*/etc/uci-defaults/*' -exec chmod 0755 {} +
          if [[ -f "$PKG_DIR/CONTROL/postinst" ]]; then chmod 0755 "$PKG_DIR/CONTROL/postinst"; fi
          if [[ -f "$PKG_DIR/CONTROL/prerm"   ]]; then chmod 0755 "$PKG_DIR/CONTROL/prerm";   fi
          if [[ -f "$PKG_DIR/usr/bin/xray-tproxy.sh" ]]; then chmod 0755 "$PKG_DIR/usr/bin/xray-tproxy.sh"; fi

      - name: Read Package name & set Version
        id: meta
        shell: bash
        run: |
          set -e
          CTRL="$PKG_DIR/CONTROL/control"
          PKG=$(awk -F': ' '/^Package:/ {print $2; exit}' "$CTRL")
          if [[ -z "$PKG" ]]; then echo "No Package field in control"; exit 1; fi
          if grep -q '^Version:' "$CTRL"; then
            sed -i "s/^Version:.*/Version: ${{ steps.ver.outputs.version }}-1/" "$CTRL"
          else
            echo "Version: ${{ steps.ver.outputs.version }}-1" >> "$CTRL"
          fi
          echo "pkg=$PKG" >> "$GITHUB_OUTPUT"

      - name: Build IPK (manual, strict .gz, python AR)
        shell: bash
        run: |
          set -euo pipefail
          PKG="${{ steps.meta.outputs.pkg }}"
          VER="${{ steps.ver.outputs.version }}-1"
      
          OUTDIR="$PWD/dist"
          rm -rf build && mkdir -p build/control build/data "$OUTDIR"
      
          rsync -a --delete --exclude 'CONTROL/' "$PKG_DIR/" build/data/
          rsync -a "$PKG_DIR/CONTROL/" build/control/
      
          # normalize control (LF, no BOM)
          sed -i 's/\r$//' build/control/control || true
          perl -0777 -pe 's/^\xEF\xBB\xBF//' -i build/control/control || true
          test -s build/control/control
      
          printf '2.0\n' > build/debian-binary
      
          # control.tar.gz (без префикса ./)
          CONTROL_FILES=$(cd build/control && ls -1 | tr '\n' ' ')
          tar --format=ustar --owner=0 --group=0 --numeric-owner \
            -C build/control -czf build/control.tar.gz $CONTROL_FILES
      
          # data.tar.gz
          DATA_TOP=$(cd build/data && find . -mindepth 1 -maxdepth 1 -printf '%P\n' | tr '\n' ' ')
          if [ -n "$DATA_TOP" ]; then
            tar --format=ustar --owner=0 --group=0 --numeric-owner \
              -C build/data -czf build/data.tar.gz $DATA_TOP
          else
            tar --format=ustar --owner=0 --group=0 --numeric-owner \
              -C build/data -czf build/data.tar.gz .
          fi
      
          # Сборка AR без завершающих '/' в именах
          python3 - <<'PY'
          import io, sys, os
          def hdr(name, size):
              def pad(s,n): return s.ljust(n, ' ')
              return (pad(name,16)+pad('0',12)+pad('0',6)+pad('0',6)+
                      pad('100644',8)+pad(str(size),10)+'`\\n').encode()
          outdir = os.environ['PWD'] + '/dist'
          with open('build/debian-binary','rb') as f: deb=f.read()
          with open('build/control.tar.gz','rb') as f: ctrl=f.read()
          with open('build/data.tar.gz','rb') as f: data=f.read()
          ipk = io.BytesIO(); ipk.write(b'!<arch>\\n')
          for name,blob in [('debian-binary',deb), ('control.tar.gz',ctrl), ('data.tar.gz',data)]:
              ipk.write(hdr(name, len(blob))); ipk.write(blob)
              if ipk.tell() % 2: ipk.write(b'\\n')
          out = f"{outdir}/{os.environ['PKG']}_{os.environ['VER']}_all.ipk"
          with open(out,'wb') as f: f.write(ipk.getvalue())
          print(out)
          PY

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ipk
          path: dist/*.ipk