name: Build .ipk (manual, no SDK / no opkg-utils)

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"
    paths:
      - "pkg/**"
      - ".github/workflows/build-ipk.yml"
  workflow_dispatch: {}

permissions:
  contents: write

env:
  PKG_DIR: pkg/tproxy-manager-ipk

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute version
        id: ver
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VER="${GITHUB_REF_NAME}"
          else
            VER="$(date -u +%Y.%m.%d)-${GITHUB_SHA::7}"
          fi
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Prepare tools
        run: |
          sudo apt-get update
          sudo apt-get install -y tar xz-utils coreutils binutils gzip

      - name: Sanity & perms
        shell: bash
        run: |
          CTRL="$PKG_DIR/CONTROL/control"
          [[ -f "$CTRL" ]] || { echo "Missing $CTRL"; exit 1; }

          # Ensure exec bits (если уже стоят — просто подтвердим)
          find "$PKG_DIR" -type f -path '*/etc/init.d/*' -exec chmod 0755 {} +
          find "$PKG_DIR" -type f -path '*/etc/uci-defaults/*' -exec chmod 0755 {} +
          if [[ -f "$PKG_DIR/CONTROL/postinst" ]]; then chmod 0755 "$PKG_DIR/CONTROL/postinst"; fi
          if [[ -f "$PKG_DIR/CONTROL/prerm"   ]]; then chmod 0755 "$PKG_DIR/CONTROL/prerm";   fi
          if [[ -f "$PKG_DIR/usr/bin/xray-tproxy.sh" ]]; then chmod 0755 "$PKG_DIR/usr/bin/xray-tproxy.sh"; fi

      - name: Read Package name & set Version
        id: meta
        shell: bash
        run: |
          CTRL="$PKG_DIR/CONTROL/control"
          PKG=$(awk -F': ' '/^Package:/ {print $2; exit}' "$CTRL")
          if [[ -z "$PKG" ]]; then echo "No Package field in control"; exit 1; fi
          # Принудительно выставим версию из шага 'ver'
          if grep -q '^Version:' "$CTRL"; then
            sed -i "s/^Version:.*/Version: ${{ steps.ver.outputs.version }}-1/" "$CTRL"
          else
            echo "Version: ${{ steps.ver.outputs.version }}-1" >> "$CTRL"
          fi
          echo "pkg=$PKG" >> "$GITHUB_OUTPUT"

      - name: Build IPK (manual)
        shell: bash
        run: |
          set -euo pipefail
          PKG="${{ steps.meta.outputs.pkg }}"
          VER="${{ steps.ver.outputs.version }}-1"

          mkdir -p build/control build/data dist

          # Разложим payload (всё кроме CONTROL) в data/, а метаданные — в control/
          rsync -a --delete --exclude 'CONTROL/' "$PKG_DIR/" build/data/
          rsync -a "$PKG_DIR/CONTROL/" build/control/

          # Обязательный файл для IPK/DEB-формата
          echo "2.0" > build/debian-binary

          # Упаковываем с root:root (uid/gid 0)
          tar -C build/control --owner=0 --group=0 --numeric-owner -czf build/control.tar.gz .
          tar -C build/data    --owner=0 --group=0 --numeric-owner -czf build/data.tar.gz .

          # Склеиваем .ipk (ar-архив из 3 файлов)
          IPK="dist/${PKG}_${VER}_all.ipk"
          (cd build && ar -cr "$IPK" debian-binary control.tar.gz data.tar.gz)

          # Немного вывода для логов
          echo "Built: $IPK"
          ar t "$IPK"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ipk
          path: dist/*.ipk