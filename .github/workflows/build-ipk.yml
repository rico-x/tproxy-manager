name: Build TPROXY-Manager (tags only) → ipkg + Feed + Sign + Release + Pages

on:
  push:
    tags:
      - 'v*'              # сборка только при пуше тега
  workflow_dispatch:
    inputs:
      version:
        description: 'Version like 25.9.14'
        required: true
        type: string

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PKG_DIR: pkg/tproxy-manager-ipk
  FEED_DIR: feed

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
      tag:     ${{ steps.ver.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute version (from tag or manual input)
        id: ver
        env:
          MANUAL_VERSION: ${{ github.event.inputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          if [ "${GITHUB_REF_TYPE:-}" = "tag" ]; then
            RAW="${GITHUB_REF_NAME:-}"
            VER="${RAW#v}"     # снять ведущую 'v'
          elif [ -n "${MANUAL_VERSION:-}" ]; then
            VER="${MANUAL_VERSION}"
          else
            echo "::error ::Version is not provided. Run on tag vX.Y.Z or via workflow_dispatch with 'version'."
            exit 1
          fi
          # Простейшая валидация вида 1.2.3 (минимум 3 числа)
          if ! printf '%s' "$VER" | grep -Eq '^[0-9]+(\.[0-9]+){2,}$'; then
            echo "::error ::Invalid version '$VER'. Use like 25.9.14"
            exit 1
          fi
          echo "version=$VER" >> "$GITHUB_OUTPUT"
          echo "tag=v$VER"    >> "$GITHUB_OUTPUT"
          echo "Resolved version: $VER"

      - name: Install base tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            ca-certificates curl gzip tar coreutils findutils gawk sed perl zip \
            build-essential cmake xz-utils

      - name: Fetch ipkg-build (OpenWrt 24.10)
        run: |
          curl -fsSL https://raw.githubusercontent.com/openwrt/openwrt/openwrt-24.10/scripts/ipkg-build -o ipkg-build
          chmod +x ipkg-build
          ./ipkg-build -h || true

      - name: Normalize CONTROL/control and perms
        shell: bash
        run: |
          set -e
          CTRL="$PKG_DIR/CONTROL/control"
          [[ -f "$CTRL" ]] || { echo "Missing $CTRL"; exit 1; }
          sed -i 's/\r$//' "$CTRL" || true
          perl -0777 -pe 's/^\xEF\xBB\xBF//' -i "$CTRL" || true
          tail -c1 "$CTRL" | od -An -t x1 | grep -q '0a' || echo >> "$CTRL"
          find "$PKG_DIR" -type f -path '*/etc/init.d/*'       -exec chmod 0755 {} +
          find "$PKG_DIR" -type f -path '*/etc/uci-defaults/*' -exec chmod 0755 {} +
          [ -f "$PKG_DIR/CONTROL/preinst"  ] && chmod 0755 "$PKG_DIR/CONTROL/preinst"  || true
          [ -f "$PKG_DIR/CONTROL/postinst" ] && chmod 0755 "$PKG_DIR/CONTROL/postinst" || true
          [ -f "$PKG_DIR/CONTROL/prerm"    ] && chmod 0755 "$PKG_DIR/CONTROL/prerm"    || true
          [ -f "$PKG_DIR/usr/bin/xray-tproxy.sh" ]     && chmod 0755 "$PKG_DIR/usr/bin/xray-tproxy.sh" || true
          [ -f "$PKG_DIR/usr/bin/optimize-sysctl.sh" ] && chmod 0755 "$PKG_DIR/usr/bin/optimize-sysctl.sh" || true
          [ -f "$PKG_DIR/usr/bin/setup-bbr.sh" ]       && chmod 0755 "$PKG_DIR/usr/bin/setup-bbr.sh"       || true

      - name: Inject Version into control
        shell: bash
        run: |
          CTRL="$PKG_DIR/CONTROL/control"
          if grep -q '^Version:' "$CTRL"; then
            sed -i "s/^Version:.*/Version: ${{ steps.ver.outputs.version }}_1-1/" "$CTRL"
          else
            echo "Version: ${{ steps.ver.outputs.version }}_1-1" >> "$CTRL"
          fi
          tail -c1 "$CTRL" | od -An -t x1 | grep -q '0a' || echo >> "$CTRL"

      - name: Build .ipk via ipkg-build (ABS dest)
        shell: bash
        run: |
          DEST="$(pwd)/dist"
          mkdir -p "$DEST"
          ./ipkg-build "$PKG_DIR" "$DEST"
          ls -lah "$DEST"
          file "$DEST"/*.ipk
          tar tzf "$DEST"/*.ipk | sed -n '1,10p'

      - name: Prepare feed (lite indexer)
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$FEED_DIR"
          mkdir -p "$FEED_DIR/keys"
          cp dist/*.ipk "$FEED_DIR"/
          cat > "$FEED_DIR/.index_lite.sh" <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          dir="${1:-.}"; cd "$dir"; : > Packages
          get_control() {
            local ipk="$1" ctrl=""
            if tar tzf "$ipk" >/dev/null 2>&1; then
              if tar tzf "$ipk" | grep -q '^./control.tar.gz$'; then
                ctrl="$(tar -xOzf "$ipk" ./control.tar.gz | tar -xOzf - ./control 2>/dev/null || tar -xOzf - control 2>/dev/null || true)"
              elif tar tzf "$ipk" | grep -q '^./control.tar.xz$'; then
                ctrl="$(tar -xOzf "$ipk" ./control.tar.xz | tar -xOJf - ./control 2>/dev/null || tar -xOJf - control 2>/dev/null || true)"
              fi
            fi
            if [ -z "$ctrl" ]; then
              if ar t "$ipk" 2>/dev/null | grep -q '^control.tar.gz$'; then
                ctrl="$(ar p "$ipk" control.tar.gz | tar -xOzf - ./control 2>/dev/null || tar -xOzf - control 2>/dev/null || true)"
              elif ar t "$ipk" 2>/dev/null | grep -q '^control.tar.xz$'; then
                ctrl="$(ar p "$ipk" control.tar.xz | tar -xOJf - ./control 2>/dev/null || tar -xOJf - control 2>/dev/null || true)"
              fi
            fi
            [ -n "$ctrl" ] && printf "%s" "$ctrl"
          }
          for ipk in *.ipk; do
            [ -f "$ipk" ] || continue
            ctrl="$(get_control "$ipk")" || true
            [ -n "$ctrl" ] || { echo "WARN: no control in $ipk" >&2; continue; }
            printf "%s\n" "$ctrl" >> Packages
            size=$(stat -c%s "$ipk" 2>/dev/null || wc -c < "$ipk")
            sha256=$(sha256sum "$ipk" | awk '{print $1}')
            echo "Filename: $ipk"     >> Packages
            echo "Size: $size"        >> Packages
            echo "SHA256sum: $sha256" >> Packages
            echo >> Packages
          done
          gzip -9fk Packages
          SH
          chmod +x "$FEED_DIR/.index_lite.sh"
          "$FEED_DIR/.index_lite.sh" "$FEED_DIR"
          [ -f keys/usign.pub ] && cp keys/usign.pub "$FEED_DIR/keys/"

      - name: Sanitize & validate usign.pub (if present)
        shell: bash
        run: |
          set -e
          if [ -f keys/usign.pub ]; then
            sed -i 's/\r$//' keys/usign.pub || true
            perl -0777 -pe 's/^\xEF\xBB\xBF//' -i keys/usign.pub || true
            awk 'NR==1 && $0 ~ /^untrusted comment:/ {ok1=1}
                 NR==2 && $0 ~ /^[A-Za-z0-9+\/=]+$/ {ok2=1}
                 END{if(!(ok1&&ok2)) {print "Invalid usign.pub format" > "/dev/stderr"; exit 1}}' keys/usign.pub
            mkdir -p "$FEED_DIR/keys"
            cp keys/usign.pub "$FEED_DIR/keys/"
          else
            echo "No keys/usign.pub — feed will be unsigned"
          fi

      - name: Render index.html from template (robust)
        shell: bash
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY##*/}"
          BASE_URL="https://${OWNER}.github.io/${REPO}/"
          REPO_URL="https://github.com/${OWNER}/${REPO}"
          REL_URL="${REPO_URL}/releases"
          mkdir -p "$FEED_DIR"
          if [ ! -f site/index.html ]; then
            mkdir -p site
            cat > site/index.html <<'HTML'
            <!doctype html><meta charset="utf-8"><title>TPROXY-Manager feed</title>
            <pre>wget -qO- __BASE__keys/usign.pub | opkg-key add -
            echo 'src/gz tproxy __BASE__' >> /etc/opkg/customfeeds.conf
            opkg update
            opkg install tproxy-manager</pre>
            <p><a href="__REPO_URL__">GitHub</a> · <a href="__REL_URL__">Releases</a></p>
            HTML
          fi
          sed -e "s|__BASE__|${BASE_URL}|g" \
              -e "s|__REPO_URL__|${REPO_URL}|g" \
              -e "s|__REL_URL__|${REL_URL}|g" \
              site/index.html > "$FEED_DIR/index.html"
          [ -f site/style.css ] && cp site/style.css "$FEED_DIR/" || true
          [ -d site/assets ] && cp -a site/assets "$FEED_DIR/" || true

      - name: Sign feed (optional)
        env:
          USIGN_SECRET: ${{ secrets.USIGN_SECRET }}
        shell: bash
        run: |
          set -e
          if [ -z "${USIGN_SECRET:-}" ]; then
            echo "USIGN_SECRET empty; skip signing."
            exit 0
          fi
          curl -fsSL https://github.com/openwrt/usign/archive/refs/heads/master.tar.gz -o usign.tar.gz
          mkdir usign-src && tar xzf usign.tar.gz -C usign-src --strip-components=1
          cmake -S usign-src -B usign-build
          cmake --build usign-build -j"$(nproc)"
          echo "$USIGN_SECRET" | base64 -d > /tmp/usign.key
          chmod 600 /tmp/usign.key
          ./usign-build/usign -S -m "$FEED_DIR/Packages" -s /tmp/usign.key
          ls -l "$FEED_DIR"/Packages*

      - name: ZIP bundle (versioned)
        shell: bash
        run: |
          VER="${{ steps.ver.outputs.version }}"
          mkdir -p release
          (cd dist && sha256sum *.ipk > "SHA256SUMS_${VER}.txt")
          (cd dist && zip -9 "../release/tproxy-manager_${VER}.zip" *.ipk "SHA256SUMS_${VER}.txt")
          ls -lah release

      - name: Upload Pages artifact (feed/)
        uses: actions/upload-pages-artifact@v3
        with:
          path: feed

      - name: Upload artifacts (versioned)
        uses: actions/upload-artifact@v4
        with:
          name: "tproxy-manager_${{ steps.ver.outputs.version }}"
          path: |
            dist/*.ipk
            release/*.zip
            feed/*

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dl

      # Для ручного запуска создадим тег v<version>, чтобы релиз был консистентным
      - name: Ensure tag exists (manual run)
        if: ${{ github.ref_type != 'tag' }}
        shell: bash
        run: |
          git fetch --tags
          if git rev-parse "${{ needs.build.outputs.tag }}" >/dev/null 2>&1; then
            echo "Tag exists: ${{ needs.build.outputs.tag }}"
          else
            git tag "${{ needs.build.outputs.tag }}" "${{ github.sha }}"
            git push origin "${{ needs.build.outputs.tag }}"
          fi

      - name: Create GitHub Release and upload
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          name: TPROXY-Manager v${{ needs.build.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dl/**/dist/*.ipk
            dl/**/release/*.zip
            dl/**/feed/Packages
            dl/**/feed/Packages.gz
            dl/**/feed/Packages.sig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pages-deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4